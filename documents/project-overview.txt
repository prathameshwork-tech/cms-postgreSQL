# PROJECT OVERVIEW - COMPLAINT MANAGEMENT SYSTEM (CMS)

## PROJECT DESCRIPTION
This is a full-stack Complaint Management System (CMS) built with a React frontend and Node.js/Express backend. The system allows users to file, track, and manage complaints with user authentication, role-based dashboards, audit logging, and notification features. Admins can manage users, complaints, and view system logs. The backend uses PostgreSQL (via Sequelize ORM).

## SYSTEM ARCHITECTURE

### Frontend (React + Vite + MUI)
- **React** (Vite, MUI, custom CSS)
- **Routing:** react-router-dom
- **Forms:** react-hook-form
- **Charts:** recharts
- **Notifications:** react-toastify
- **State/Context:** React Context, custom hooks (useAuth, useComplaints, useUsers)

### Backend (Node.js + Express + Sequelize + PostgreSQL)
- **Express** server
- **Sequelize** ORM
- **PostgreSQL** database
- **JWT** authentication
- **bcryptjs** for password hashing
- **express-validator** for input validation
- **dotenv** for environment variables
- **cors** for CORS
- **Audit logging** (logs table)
- **Notification bell** (urgent complaints)
- **File uploads** (if implemented)

## DATA FLOW

### 1. Authentication Flow
User Login/Register → Frontend Form → API Call → Backend Validation → 
Database Check → JWT Token Generation → Response to Frontend → 
Token Storage → Protected Route Access

### 2. Complaint Management Flow
User Files Complaint → Frontend Form → API Call → Backend Validation →
Database Storage → (Optional: File Upload) → Response to Frontend →
Complaint List Update → Notification Bell (for critical/urgent complaints)

### 3. Audit Logging
All key actions (login, complaint status change, user management) are logged in the logs table for admin review.

## COMPONENT RESPONSIBILITIES

### Frontend Components
- **Header, Sidebar, Footer**: Navigation, user info, notifications
- **Dashboard**: Overview of complaints, stats, charts
- **Complaints Table/Details**: List, view, and manage complaints
- **User Table/Details**: Admin user management
- **Logs**: Admin audit log viewing
- **Auth Pages**: Login, Register
- **ProtectedRoute**: Route protection
- **Custom Modals, Buttons, Tables**: UI primitives

### Backend Components
- **Routes**: authRoutes, complaintRoutes, userRoutes, logRoutes
- **Controllers**: authController, complaintController, userController, logController
- **Models**: User, Complaint, Comment, Log (Sequelize, UUIDs, ENUMs, JSONB)
- **Middleware**: auth, errorHandler, logger
- **Services/Utils**: dbService, jwt, validators

## API ENDPOINTS (Key Examples)
- `POST /api/auth/register` - Register user
- `POST /api/auth/login` - Login
- `GET /api/complaints` - List complaints
- `POST /api/complaints` - File complaint
- `PUT /api/complaints/:id` - Update complaint
- `GET /api/complaints/urgent` - Get urgent complaints (for notification bell)
- `GET /api/users` - List users (admin)
- `GET /api/logs` - List audit logs (admin)

## DATABASE SCHEMA (PostgreSQL via Sequelize)

### User Table
- id (UUID, PK)
- name
- email
- password (hashed)
- role (ENUM: admin, user)
- isActive (boolean)
- createdAt, updatedAt

### Complaint Table
- id (UUID, PK)
- title
- description
- category (ENUM)
- priority (ENUM)
- status (ENUM)
- submittedBy (FK: User)
- assignedTo (FK: User, nullable)
- department
- attachments (JSONB)
- tags (JSONB)
- createdAt, updatedAt

### Comment Table
- id (UUID, PK)
- complaintId (FK: Complaint)
- userId (FK: User)
- comment
- createdAt

### Log Table
- id (UUID, PK)
- userId (FK: User)
- action
- details (JSONB)
- createdAt

## SECURITY FEATURES
- JWT authentication
- Role-based access control
- Password hashing (bcryptjs)
- Input validation (express-validator)
- CORS configuration
- SQL injection prevention (via Sequelize)

## PERFORMANCE OPTIMIZATIONS
- Database indexing
- Query optimization
- Response caching (if implemented)
- Connection pooling

## MONITORING & LOGGING
- Audit logging (logs table)
- Error logging (middleware)

---
Last Updated: July 14, 2024
Notes: This document reflects the current Complaint Management System architecture and features. Remove any legacy CMS/content/media references. 